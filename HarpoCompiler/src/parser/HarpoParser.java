/* Generated By:JavaCC: Do not edit this line. HarpoParser.java */
package parser;
import frontEnd.Builder;
import frontEnd.AST.*;
import frontEnd.Builder.*;

public class HarpoParser implements HarpoParserConstants {
  Builder builder;
  String fileName = "<unknown>";

  public void setBuilder(Builder b)
  {
    builder = b;
  }

  public void setFileName(String fn)
  {
    fileName = fn;
  }
  Coord getCoord(int i)
  {
    return getCoord(getToken(i));
  }
  Coord getCoord(Token t)
  {
    return builder.makeCoord(fileName, t.beginLine, t.beginColumn);
  }

  final public DeclList Start() throws ParseException {
  DeclList p = builder.declList(); // for interface and class declaration
  DeclNd q;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
      case 34:
      case 53:
      case 60:
      case 68:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
      case 53:
      case 60:
      case 68:
        if (jj_2_1(2147483647)) {
          q = ClassDecl();
        } else if (jj_2_2(2147483647)) {
          q = IntfDecl();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 53:
          case 60:
          case 68:
            q = ObjDecl(builder.publicAccess());
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      p.addDeclaration(q);
        break;
      case 34:
        jj_consume_token(34);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

/***************************/
/** Nonlocal Declarations **/
/***************************/
  final public ClassDeclNd ClassDecl() throws ParseException {
  ClassDeclNd p;
  TypeNd t;
  ParamDeclNd par;
  DeclNd d;
  PreCndNd preCnd;
  PostCndNd postCnd;
  GivesPerNd givesPer;
  TakesPerNd takesPer;
  BorrowsPerNd borrowsPer;
  String name;
  Token tk;
    jj_consume_token(11);
    jj_consume_token(50);
    name = Name();
    p = builder.classDeclNd(name, getCoord(0));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      GParams(p);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(11);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 60:
    case 63:
    case 68:
      par = CParam();
      p.addConstructorParam(par);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        jj_consume_token(35);
        par = CParam();
        p.addConstructorParam(par);
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(12);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
      case 59:
      case 71:
      case 72:
      case 76:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 71:
        preCnd = PreCond();
                         p.addConstructorSpec(preCnd);
        break;
      case 72:
        postCnd = PostCond();
                           p.addConstructorSpec(postCnd);
        break;
      case 59:
        givesPer = GivesPer();
                            p.addConstructorPer(givesPer);
        break;
      case 76:
        takesPer = TakesPer();
                             p.addConstructorPer(takesPer);
        break;
      case 47:
        borrowsPer = BorrowsPer();
                                p.addConstructorPer(borrowsPer);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 62:
      jj_consume_token(62);
      label_4:
      while (true) {
        t = Type();
        p.addSuperType(t);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
      case 34:
      case 51:
      case 53:
      case 60:
      case 65:
      case 68:
      case 73:
      case 74:
      case 75:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
      case 51:
      case 53:
      case 60:
      case 65:
      case 68:
      case 73:
      case 74:
      case 75:
        d = ClassMember();
      p.addMember(d);
        break;
      case 34:
        jj_consume_token(34);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 50:
      jj_consume_token(50);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        tk = jj_consume_token(NAME);
        p.checkName(tk.image, getCoord(tk));
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(12);
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public DeclNd ClassMember() throws ParseException {
  DeclNd d;
    if (jj_2_3(2147483647)) {
      d = Field();
    } else if (jj_2_4(2147483647)) {
      d = Method();
    } else if (jj_2_5(2147483647)) {
      d = Thread();
    } else if (jj_2_6(2147483647)) {
      d = Claim();
    } else if (jj_2_7(2147483647)) {
      d = ClassInvariant();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public IntfDeclNd IntfDecl() throws ParseException {
  IntfDeclNd p;
  TypeNd t;
  DeclNd d;
  String name;
  Token tk;
    jj_consume_token(11);
    jj_consume_token(64);
    name = Name();
    p = builder.intfDeclNd(name, getCoord(0));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      GParams(p);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 57:
      jj_consume_token(57);
      label_6:
      while (true) {
        t = Type();
        p.addSuperType(t);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_6;
        }
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
      case 53:
      case 60:
      case 68:
      case 73:
      case 74:
      case 75:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
      case 60:
      case 68:
      case 73:
      case 74:
      case 75:
        d = IntfMember();
      p.addMember(d);
        break;
      case 34:
        jj_consume_token(34);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 64:
      jj_consume_token(64);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        tk = jj_consume_token(NAME);
        p.checkName(tk.image, getCoord(tk));
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(12);
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public void GParams(ClassLike p) throws ParseException {
    jj_consume_token(15);
    GParam(p);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_8;
      }
      jj_consume_token(35);
      GParam(p);
    }
    jj_consume_token(16);
  }

  final public void GParam(ClassLike p) throws ParseException {
  String name;
  TypeNd ty;
  Token tk;
    jj_consume_token(79);
    tk = getToken(1);
    name = Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 57:
      jj_consume_token(57);
      ty = Type();
      break;
    default:
      jj_la1[22] = jj_gen;
      ty = builder.topTypeNd(getCoord(tk));
    }
    p.addGeneric(name, ty, getCoord(tk));
  }

  final public DeclNd IntfMember() throws ParseException {
  boolean isGhost;
  DeclNd d;
    if (jj_2_8(2147483647)) {
      d = Field();
    } else if (jj_2_9(2147483647)) {
      d = Method();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public Access Access() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 73:
      jj_consume_token(73);
    {if (true) return builder.privateAccess();}
      break;
    case 75:
      jj_consume_token(75);
    {if (true) return builder.publicAccess();}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ObjDeclNd Field() throws ParseException {
  ObjDeclNd p;
  // By default fields are private.
  Access acc = builder.privateAccess();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 73:
    case 75:
      acc = Access();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    p = ObjDecl(acc);
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public boolean Ghost() throws ParseException {
  boolean isGhost = false;
    jj_consume_token(60);
    isGhost = true;
    {if (true) return isGhost;}
    throw new Error("Missing return statement in function");
  }

  final public ObjDeclNd ObjDecl(Access acc) throws ParseException {
  boolean isConst = false;
  boolean isGhost = false;
  TypeNd ty;
  InitExpNd exp;
  String name;
  Token tk;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 60:
      isGhost = Ghost();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 68:
      jj_consume_token(68);
      isConst = false;
      break;
    case 53:
      jj_consume_token(53);
      isConst = true;
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    tk = getToken(1);
    name = Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      ty = Type();
      break;
    default:
      jj_la1[27] = jj_gen;
      ty = builder.noTypeNd(getCoord(tk));
    }
    jj_consume_token(36);
    exp = InitExp();
    {if (true) return builder.objDeclNd(isGhost, isConst, name, acc, ty, exp, getCoord(tk));}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclNd Method() throws ParseException {
  Access acc = builder.publicAccess();
  ParamDeclNd param;
  String name;
  ParamList paramList = builder.paramList();
  Token tk;
  ExpNd x;
  PreCndNd preCnd;
  PreCndList preCndList = builder.preCndList();
  PostCndNd postCnd;
  PostCndList postCndList = builder.postCndList();
  GivesPerNd givesPer;
  GivesPerList givesPerList = builder.givesPerList();
  TakesPerNd takesPer;
  TakesPerList takesPerList = builder.takesPerList();
  BorrowsPerNd borrowsPer;
  BorrowsPerList borrowsPerList = builder.borrowsPerList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 73:
    case 75:
      acc = Access();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(74);
    tk = getToken(1);
    name = Name();
    jj_consume_token(11);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 60:
    case 63:
    case 69:
      param = MParam();
      builder.add(paramList, param);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
        case 60:
        case 63:
        case 69:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
          jj_consume_token(35);
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        param = MParam();
        builder.add(paramList, param);
      }
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(12);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
      case 59:
      case 71:
      case 72:
      case 76:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 71:
        preCnd = PreCond();
      builder.add(preCndList, preCnd);
        break;
      case 72:
        postCnd = PostCond();
      builder.add(postCndList, postCnd);
        break;
      case 59:
        givesPer = GivesPer();
      builder.add(givesPerList, givesPer);
        break;
      case 76:
        takesPer = TakesPer();
      builder.add(takesPerList, takesPer);
        break;
      case 47:
        borrowsPer = BorrowsPer();
      builder.add(borrowsPerList, borrowsPer);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return builder.methodDeclNd(name, acc, paramList, preCndList, postCndList, givesPerList, takesPerList, borrowsPerList, getCoord(tk));}
    throw new Error("Missing return statement in function");
  }

/********************************************/
/** Method Specifications and Permissions **/
/******************************************/
  final public PreCndNd PreCond() throws ParseException {
  ExpNd x;
  Token tk;
    tk = jj_consume_token(71);
    x = Exp();
    {if (true) return builder.makePre(x, getCoord(tk));}
    throw new Error("Missing return statement in function");
  }

  final public PostCndNd PostCond() throws ParseException {
  ExpNd x;
  Token tk;
    tk = jj_consume_token(72);
    x = Exp();
    {if (true) return builder.makePost(x, getCoord(tk));}
    throw new Error("Missing return statement in function");
  }

  final public GivesPerNd GivesPer() throws ParseException {
  PermissionMapNd permMapNd;
  Token tk;
    tk = jj_consume_token(59);
    permMapNd = PermissionMap();
    {if (true) return builder.makeGives(permMapNd, getCoord(tk));}
    throw new Error("Missing return statement in function");
  }

  final public TakesPerNd TakesPer() throws ParseException {
  PermissionMapNd permMapNd;
  Token tk;
    tk = jj_consume_token(76);
    permMapNd = PermissionMap();
    {if (true) return builder.makeTakes(permMapNd, getCoord(tk));}
    throw new Error("Missing return statement in function");
  }

  final public BorrowsPerNd BorrowsPer() throws ParseException {
  PermissionMapNd permMapNd;
  Token tk;
    tk = jj_consume_token(47);
    permMapNd = PermissionMap();
    {if (true) return builder.makeBorrows(permMapNd, getCoord(tk));}
    throw new Error("Missing return statement in function");
  }

// Thread may start with a claim
  final public ThreadDeclNd Thread() throws ParseException {
  CommandNd bl;
  ClaimNd claim;
  ClaimList claimList = builder.claimList();
  Token tk = getToken(1);
    tk = jj_consume_token(11);
    jj_consume_token(78);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_11;
      }
      claim = Claim();
        builder.add(claimList, claim);
    }
    bl = Block();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 78:
      jj_consume_token(78);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(12);
      {if (true) return builder.threadDeclNd(claimList, bl, getCoord(tk));}
    throw new Error("Missing return statement in function");
  }

/****************/
/** Parameters **/
/**************/
  final public ParamDeclNd CParam() throws ParseException {
  ParamDeclNd param;
    if (jj_2_10(2147483647)) {
      param = ObjParam();
      {if (true) return param;}
    } else if (jj_2_11(2147483647)) {
      param = InParam();
      {if (true) return param;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ParamDeclNd MParam() throws ParseException {
  ParamDeclNd param;
    if (jj_2_12(2147483647)) {
      param = OutParam();
      {if (true) return param;}
    } else if (jj_2_13(2147483647)) {
      param = InParam();
      {if (true) return param;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ParamDeclNd InParam() throws ParseException {
  boolean isGhost = false;
  ParamDeclNd param;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 60:
      isGhost = Ghost();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    jj_consume_token(63);
    param = Param(isGhost, builder.inParamCategory());
      {if (true) return param;}
    throw new Error("Missing return statement in function");
  }

  final public ParamDeclNd OutParam() throws ParseException {
  boolean isGhost = false;
  ParamDeclNd param;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 60:
      isGhost = Ghost();
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    jj_consume_token(69);
    param = Param(isGhost, builder.outParamCategory());
      {if (true) return param;}
    throw new Error("Missing return statement in function");
  }

  final public ParamDeclNd ObjParam() throws ParseException {
  ParamDeclNd param;
  boolean isGhost = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 60:
      isGhost = Ghost();
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(68);
    param = Param(isGhost, builder.objParamCategory());
      {if (true) return param;}
    throw new Error("Missing return statement in function");
  }

// Ghost Parameters
  final public ParamDeclNd Param(boolean isGhost, ParamCategory cat) throws ParseException {
  String name;
  TypeNd ty;
  Token tk = getToken(1);
    name = Name();
    jj_consume_token(17);
    ty = Type();
    {if (true) return builder.paramDeclNd(isGhost, name, ty, cat, getCoord(tk));}
    throw new Error("Missing return statement in function");
  }

  final public ClaimNd Claim() throws ParseException {
  ExpNd loc;
  Token tk;
  PermissionMapNd permMapNd;
  PermissionMapList pml = builder.permissionMapList();
    tk = jj_consume_token(51);
    permMapNd = PermissionMap();
    {if (true) return builder.makeClaimNd(permMapNd, getCoord(tk));}
    throw new Error("Missing return statement in function");
  }

  final public PermissionMapNd PermissionMap() throws ParseException {
  String name;
  String defaultPer;
  Token tk = getToken(1);
  PermissionMapNd permMapNd;
  ExpNd exp;
  ExpList explst = builder.expList();
  LocSetNd locSet;
  LocSetList lsl = builder.locSetList();
    // Supply default permission if not given "1.0"
      locSet = LocSet();
    builder.add(lsl, locSet);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
      jj_consume_token(40);
      exp = Exp();
        builder.add(explst, exp);
      break;
    default:
      jj_la1[39] = jj_gen;
      exp = DefaultPermission();
        builder.add(explst, exp);
    }
    label_12:
    while (true) {
      if (jj_2_14(2147483647)) {
        ;
      } else {
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
        jj_consume_token(35);
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      locSet = LocSet();
      builder.add(lsl, locSet);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        jj_consume_token(40);
        exp = Exp();
          builder.add(explst, exp);
        break;
      default:
        jj_la1[41] = jj_gen;
        exp = DefaultPermission();
          builder.add(explst, exp);
      }
    }
    {if (true) return permMapNd = builder.makePermissionMapNd(lsl, explst, getCoord(tk));}
    throw new Error("Missing return statement in function");
  }

  final public LocSetNd LocSet() throws ParseException {
  LocSetNd ls;
  String name_Str;
  NameExpNd arrayName;
  ExpNd objId;
  LocSetNd locSet;
  String forVar;
  ExpNd offSet, bound;
  boolean boundInclusive;
  Token tk = getToken(1);
    if (jj_2_15(2147483647)) {
      boundInclusive = false;
      jj_consume_token(15);
      forVar = Name();
      jj_consume_token(17);
      jj_consume_token(15);
      offSet = Exp();
      jj_consume_token(35);
      jj_consume_token(39);
      jj_consume_token(39);
      bound = Exp();
      jj_consume_token(16);
      jj_consume_token(54);
      locSet = LocSet();
      jj_consume_token(16);
      {if (true) return builder.makeArrayLSN(forVar, offSet, bound, boundInclusive, locSet, getCoord(tk));}
    } else if (jj_2_16(2147483647)) {
      boundInclusive = true;
      jj_consume_token(15);
      forVar = Name();
      jj_consume_token(17);
      jj_consume_token(15);
      offSet = Exp();
      jj_consume_token(35);
      jj_consume_token(39);
      jj_consume_token(39);
      jj_consume_token(35);
      bound = Exp();
      jj_consume_token(16);
      jj_consume_token(54);
      locSet = LocSet();
      jj_consume_token(16);
      {if (true) return builder.makeArrayLSN(forVar, offSet, bound, boundInclusive, locSet, getCoord(tk));}
    } else if (jj_2_17(2147483647)) {
      objId = ObjectId();
      {if (true) return builder.makeObjectIdLSN(objId, getCoord(tk));}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpNd DefaultPermission() throws ParseException {
  ExpNd defPerVal;
  Token tk;
    tk = getToken(1);
    defPerVal = builder.makeDefaultPermissionValue(getCoord(tk));
    {if (true) return defPerVal;}
    throw new Error("Missing return statement in function");
  }

  final public ClassInvNd ClassInvariant() throws ParseException {
  ExpNd x;
  Token tk;
    tk = getToken(1);
    tk = jj_consume_token(65);
    x = Exp();
    {if (true) return builder.makeClassInvariant(x, getCoord(tk));}
    throw new Error("Missing return statement in function");
  }

  final public LoopInvNd LoopInvariant() throws ParseException {
  ExpNd x;
  Token tk;
    tk = getToken(1);
    tk = jj_consume_token(65);
    x = Exp();
    {if (true) return builder.makeLoopInvariant(x, getCoord(tk));}
    throw new Error("Missing return statement in function");
  }

/************/
/** Types **/
/**********/
  final public TypeNd Type() throws ParseException {
  String name;
  TypeNd ty;
  ExpNd bound;
  GenericArgs ga;
  Token tk;
  Coord coord;
  NameNd nameNd;
    tk = getToken(1);
    name = Name();
    coord = getCoord(tk);
    nameNd = builder.simpleName(name, coord);
    ty = builder.namedTypeNd(nameNd, getCoord(tk));
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
      case 15:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
      tk = getToken(1);
        ga = GArgs();
      ty = builder.specializedTypeNd(ty, ga, getCoord(tk));
        break;
      case 13:
        tk = jj_consume_token(13);
        bound = Exp();
        jj_consume_token(14);
      ty = builder.arrayTypeNd(ty, bound, getCoord(tk));
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return ty;}
    throw new Error("Missing return statement in function");
  }

  final public GenericArgs GArgs() throws ParseException {
  TypeNd ty;
  GenericArgs ga = builder.genArgs();
    jj_consume_token(15);
    ty = Type();
    builder.add(ga, ty);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_14;
      }
      jj_consume_token(35);
      ty = Type();
      builder.add(ga, ty);
    }
    jj_consume_token(16);
    {if (true) return ga;}
    throw new Error("Missing return statement in function");
  }

/**********************************************/
/** Blocks, Local Declarations, and Commands **/
/**********************************************/
  final public CommandNd Block() throws ParseException {
  CommandNd p, q;
  Token tk;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
    case 45:
    case 46:
    case NAME:
      p = Command();
    tk = getToken(1);
      q = Block();
    {if (true) return builder.isSkip(q) ? p : builder.seq(p, q, getCoord(tk));}
      break;
    case 53:
    case 60:
    case 68:
      p = LocalDeclaration();
    {if (true) return p;}
      break;
    case 34:
      jj_consume_token(34);
      p = Block();
    {if (true) return p;}
      break;
    default:
      jj_la1[45] = jj_gen;
    {if (true) return builder.skip(getCoord(1));}
    }
    throw new Error("Missing return statement in function");
  }

  final public CommandNd LocalDeclaration() throws ParseException {
  boolean isConst;
  boolean isGhost = false;
  String name;
  TypeNd ty;
  ExpNd x;
  CommandNd p;
  Token tk = getToken(1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 60:
      isGhost = Ghost();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 68:
      tk = jj_consume_token(68);
      isConst = false;
      break;
    case 53:
      tk = jj_consume_token(53);
      isConst = true;
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    name = Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      tk = jj_consume_token(17);
      ty = Type();
      break;
    default:
      jj_la1[48] = jj_gen;
      ty = builder.noTypeNd(getCoord(tk));
    }
    jj_consume_token(36);
    x = Exp();
    p = Block();
    {if (true) return builder.localDecl(isGhost, isConst, name, ty, x, p, getCoord(tk));}
    throw new Error("Missing return statement in function");
  }

  final public CommandNd Command() throws ParseException {
  ExpList vl;
  ExpList el;
  ExpNd lhs = null;
  String name;
  CommandNd p, q;
  MethodImplementationDeclNd mi;
  MethodImplementationList mis;
  ExpNd x, y;
  ExpNd lock;
  Token tk = getToken(1);
  LoopInvNd loopInv;
  LoopInvList wlil = builder.loopInvList();
  LoopInvList flil = builder.loopInvList();
  ClaimNd claim;
  ClaimList cl1 = builder.claimList();
  ClaimList cl2 = builder.claimList();
  GivesPerNd givesPer;
  GivesPerList gpl = builder.givesPerList();
  TakesPerNd takesPer;
  TakesPerList tpl = builder.takesPerList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      tk = jj_consume_token(45);
      x = Exp();
    {if (true) return builder.makeAssertCmd(x, getCoord(tk));}
      break;
    case 46:
      tk = jj_consume_token(46);
      x = Exp();
    {if (true) return builder.makeAssumeCmd(x, getCoord(tk));}
      break;
    default:
      jj_la1[65] = jj_gen;
      if (jj_2_19(2147483647)) {
        vl = NonemptyVarList();
        tk = jj_consume_token(36);
        el = NonemptyExpList();
    {if (true) return builder.assignment(vl, el, getCoord(tk));}
      } else if (jj_2_20(2147483647)) {
        x = ObjectId();
        tk = jj_consume_token(36);
        y = Exp();
    {if (true) return builder.assignment(builder.expList(x), builder.expList(y), getCoord(tk));}
      } else if (jj_2_21(2147483647)) {
        // The object id needs to end with a name. The builder will check this.
          lhs = ObjectId();
        jj_consume_token(11);
        el = ExpList();
        jj_consume_token(12);
    {if (true) return builder.call(lhs, el, getCoord(tk));}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 11:
          jj_consume_token(11);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 61:
            jj_consume_token(61);
            p = MoreIf();
      {if (true) return p;}
            break;
          case 81:
            jj_consume_token(81);
            x = Exp();
            label_15:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 65:
                ;
                break;
              default:
                jj_la1[49] = jj_gen;
                break label_15;
              }
              loopInv = LoopInvariant();
        builder.add(wlil, loopInv);
            }
            jj_consume_token(54);
            p = Block();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 81:
              jj_consume_token(81);
              break;
            default:
              jj_la1[50] = jj_gen;
              ;
            }
            jj_consume_token(12);
      {if (true) return builder.makeWhile(x, wlil, p, getCoord(tk));}
            break;
          case 58:
            jj_consume_token(58);
            name = Name();
            jj_consume_token(17);
            x = Exp();
            label_16:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 65:
                ;
                break;
              default:
                jj_la1[51] = jj_gen;
                break label_16;
              }
              loopInv = LoopInvariant();
        builder.add(flil, loopInv);
            }
            jj_consume_token(54);
            p = Block();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 58:
              jj_consume_token(58);
              break;
            default:
              jj_la1[52] = jj_gen;
              ;
            }
            jj_consume_token(12);
      {if (true) return builder.makeFor(name, x, flil, p, getCoord(tk));}
            break;
          default:
            jj_la1[63] = jj_gen;
            if (jj_2_18(2147483647)) {
              jj_consume_token(52);
              name = Name();
              jj_consume_token(17);
              x = Exp();
              label_17:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case 51:
                  ;
                  break;
                default:
                  jj_la1[53] = jj_gen;
                  break label_17;
                }
                claim = Claim();
        builder.add(cl1, claim);
              }
              jj_consume_token(54);
              p = Block();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 52:
                jj_consume_token(52);
                break;
              default:
                jj_la1[54] = jj_gen;
                ;
              }
              jj_consume_token(12);
      {if (true) return builder.makeCo(name, x, cl1, p, getCoord(tk));}
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 52:
                jj_consume_token(52);
                label_18:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case 51:
                    ;
                    break;
                  default:
                    jj_la1[55] = jj_gen;
                    break label_18;
                  }
                  claim = Claim();
        builder.add(cl2, claim);
                }
                p = Block();
                label_19:
                while (true) {
                  jj_consume_token(38);
                  q = Block();
        p = builder.makeCo(cl2, p, q, getCoord(tk));
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case 38:
                    ;
                    break;
                  default:
                    jj_la1[56] = jj_gen;
                    break label_19;
                  }
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case 52:
                  jj_consume_token(52);
                  break;
                default:
                  jj_la1[57] = jj_gen;
                  ;
                }
                jj_consume_token(12);
      {if (true) return p;}
                break;
              case 42:
                jj_consume_token(42);
                mi = MethodImpl();
      mis = builder.methodImplementationList();
      builder.add(mis, mi);
                label_20:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case 37:
                    ;
                    break;
                  default:
                    jj_la1[58] = jj_gen;
                    break label_20;
                  }
                  jj_consume_token(37);
                  mi = MethodImpl();
        builder.add(mis, mi);
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case 42:
                  jj_consume_token(42);
                  break;
                default:
                  jj_la1[59] = jj_gen;
                  ;
                }
                jj_consume_token(12);
      {if (true) return builder.makeAccept(mis, getCoord(tk));}
                break;
              case 82:
                jj_consume_token(82);
                lock = Lock();
                label_21:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case 76:
                    ;
                    break;
                  default:
                    jj_la1[60] = jj_gen;
                    break label_21;
                  }
                  takesPer = TakesPer();
        builder.add(tpl, takesPer);
                }
                y = OptGuard();
                jj_consume_token(54);
                p = Block();
                label_22:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case 59:
                    ;
                    break;
                  default:
                    jj_la1[61] = jj_gen;
                    break label_22;
                  }
                  givesPer = GivesPer();
        builder.add(gpl, givesPer);
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case 82:
                  jj_consume_token(82);
                  break;
                default:
                  jj_la1[62] = jj_gen;
                  ;
                }
                jj_consume_token(12);
      {if (true) return builder.makeWith(lock, tpl, y, p, gpl, getCoord(tk));}
                break;
              default:
                jj_la1[64] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpList NonemptyVarList() throws ParseException {
  ExpList r = builder.expList();
  ExpNd lhs;
    lhs = ObjectId();
    builder.add(r, lhs);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_23;
      }
      jj_consume_token(35);
      lhs = ObjectId();
      builder.add(r, lhs);
    }
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public ExpList NonemptyExpList() throws ParseException {
  ExpList r = builder.expList();
  ExpNd rhs;
    rhs = Exp();
    builder.add(r, rhs);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_24;
      }
      jj_consume_token(35);
      rhs = Exp();
      builder.add(r, rhs);
    }
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public ExpList ExpList() throws ParseException {
  ExpList r = builder.expList();
  ExpNd rhs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
    case NOT:
    case 31:
    case 48:
    case 49:
    case 70:
    case 84:
    case BOOL_LITERAL:
    case NAME:
    case DEC_LITERAL:
    case BIN_LITERAL:
    case OCT_LITERAL:
    case HEX_LITERAL:
    case REAL_LITERAL:
      rhs = Exp();
      builder.add(r, rhs);
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_25;
        }
        jj_consume_token(35);
        rhs = Exp();
        builder.add(r, rhs);
      }
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public CommandNd MoreIf() throws ParseException {
  CommandNd p, q;
  ExpNd x;
  Token tk = getToken(1);
    x = Exp();
    jj_consume_token(77);
    p = Block();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
    case 61:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 61:
        jj_consume_token(61);
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
      tk = jj_consume_token(12);
      q = builder.skip(getCoord(tk));
      break;
    case 56:
      jj_consume_token(56);
      if (jj_2_22(2147483647)) {
        jj_consume_token(61);
        tk = jj_consume_token(12);
        q = builder.skip(getCoord(tk));
      } else if (jj_2_23(2147483647)) {
        jj_consume_token(61);
        q = MoreIf();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 11:
        case 12:
        case 34:
        case 45:
        case 46:
        case 53:
        case 60:
        case 61:
        case 68:
        case NAME:
          q = Block();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 61:
            jj_consume_token(61);
            break;
          default:
            jj_la1[72] = jj_gen;
            ;
          }
          jj_consume_token(12);
          break;
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return builder.makeIf(x, p, q, getCoord(tk));}
    throw new Error("Missing return statement in function");
  }

  final public MethodImplementationDeclNd MethodImpl() throws ParseException {
  String name;
  NameNd nameNd;
  ParamDeclNd param;
  CommandNd p, q;
  ExpNd x;
  ParamList paramList = builder.paramList();
  Coord coord;
    coord = getCoord(1);
    name = Name();
    jj_consume_token(11);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 60:
    case 63:
    case 69:
      param = MParam();
      builder.add(paramList, param);
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
        case 60:
        case 63:
        case 69:
          ;
          break;
        default:
          jj_la1[75] = jj_gen;
          break label_26;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
          jj_consume_token(35);
          break;
        default:
          jj_la1[76] = jj_gen;
          ;
        }
        param = MParam();
        builder.add(paramList, param);
      }
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    jj_consume_token(12);
    x = OptGuard();
    p = Block();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 77:
      jj_consume_token(77);
      q = Block();
      break;
    default:
      jj_la1[78] = jj_gen;
      q = builder.skip(getCoord(1));
    }
    nameNd = builder.simpleName(name, coord);
    {if (true) return builder.methodImpl(nameNd, paramList, x, p, q, coord);}
    throw new Error("Missing return statement in function");
  }

/********************************/
/** Initialization Expressions **/
/********************************/
  final public InitExpNd InitExp() throws ParseException {
  String name;
  TypeNd t;
  ExpNd x;
  InitExpNd a;
  ExpList args;
  Token tk = getToken(1);
  Coord coord = getCoord(tk);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 67:
      jj_consume_token(67);
      t = Type();
      jj_consume_token(11);
      args = ExpList();
      jj_consume_token(12);
    {if (true) return builder.newInitExp(t, args, coord);}
      break;
    default:
      jj_la1[80] = jj_gen;
      if (jj_2_24(2147483647)) {
        jj_consume_token(11);
        jj_consume_token(58);
        name = Name();
        jj_consume_token(17);
        x = Exp();
        jj_consume_token(54);
        a = InitExp();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 58:
          jj_consume_token(58);
          break;
        default:
          jj_la1[79] = jj_gen;
          ;
        }
        jj_consume_token(12);
    {if (true) return builder.arrayInitExp(name, x, a, coord);}
      } else if (jj_2_25(2147483647)) {
        jj_consume_token(11);
        jj_consume_token(61);
        a = MoreIfInitExp();
    {if (true) return a;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 11:
        case NOT:
        case 31:
        case 48:
        case 49:
        case 70:
        case 84:
        case BOOL_LITERAL:
        case NAME:
        case DEC_LITERAL:
        case BIN_LITERAL:
        case OCT_LITERAL:
        case HEX_LITERAL:
        case REAL_LITERAL:
          x = Exp();
    {if (true) return builder.valueInitExp(x, x.coord());}
          break;
        default:
          jj_la1[81] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public InitExpNd MoreIfInitExp() throws ParseException {
  ExpNd x;
  InitExpNd a;
  InitExpNd b;
    x = Exp();
    jj_consume_token(77);
    a = InitExp();
    jj_consume_token(56);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 61:
      jj_consume_token(61);
      b = MoreIfInitExp();
      break;
    case 11:
    case NOT:
    case 31:
    case 48:
    case 49:
    case 67:
    case 70:
    case 84:
    case BOOL_LITERAL:
    case NAME:
    case DEC_LITERAL:
    case BIN_LITERAL:
    case OCT_LITERAL:
    case HEX_LITERAL:
    case REAL_LITERAL:
      b = InitExp();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 61:
        jj_consume_token(61);
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      jj_consume_token(12);
      break;
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return builder.ifInitExp(x, a, b, x.coord());}
    throw new Error("Missing return statement in function");
  }

/******************/
/** Expressions **/
/****************/
  final public ExpNd Exp() throws ParseException {
  ExpNd x, y;
  Token tk;
  TypeNd ty;
    x = Exp0();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLIES:
      case FOLLOWS_FROM:
      case BICOND:
        ;
        break;
      default:
        jj_la1[84] = jj_gen;
        break label_27;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLIES:
        tk = jj_consume_token(IMPLIES);
        y = Exp0();
        x = builder.binaryOp("=>", x, y, getCoord(tk));
        break;
      case FOLLOWS_FROM:
        tk = jj_consume_token(FOLLOWS_FROM);
        y = Exp0();
        x = builder.binaryOp("<=", y, x, getCoord(tk));
        break;
      case BICOND:
        tk = jj_consume_token(BICOND);
        y = Exp0();
        x = builder.binaryOp("<=>", x, y, getCoord(tk));
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
      tk = jj_consume_token(44);
      ty = Type();
      x = builder.asExp(x, ty, getCoord(tk));
      break;
    default:
      jj_la1[86] = jj_gen;
      ;
    }
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ExpNd Exp0() throws ParseException {
  ExpNd x, y;
  Token tk;
    x = Exp1();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[87] = jj_gen;
        break label_28;
      }
      tk = jj_consume_token(OR);
      y = Exp1();
        x = builder.binaryOp("or", x, y, getCoord(tk));
    }
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ExpNd Exp1() throws ParseException {
  ExpNd x, y;
  Token tk;
    x = Exp2();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[88] = jj_gen;
        break label_29;
      }
      tk = jj_consume_token(AND);
      y = Exp2();
        x = builder.binaryOp("and", x, y, getCoord(tk));
    }
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ExpNd Exp2() throws ParseException {
  ExpNd x;
  Token tk;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      tk = jj_consume_token(NOT);
      x = Exp2();
    {if (true) return builder.unaryOp("not", x, getCoord(tk));}
      break;
    case 11:
    case 31:
    case 48:
    case 49:
    case 70:
    case 84:
    case BOOL_LITERAL:
    case NAME:
    case DEC_LITERAL:
    case BIN_LITERAL:
    case OCT_LITERAL:
    case HEX_LITERAL:
    case REAL_LITERAL:
      x = Exp3();
    {if (true) return x;}
      break;
    default:
      jj_la1[89] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpNd Exp3() throws ParseException {
  ExpNd y;
  ComparisonList x;
  Token tk = getToken(1);
    y = Exp4();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
    case NE:
    case 26:
    case LE:
    case GE:
    case 29:
      x = builder.startComparison(y);
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 24:
          jj_consume_token(24);
          y = Exp4();
        x = builder.comparisonOp("=", x, y);
          break;
        case NE:
          jj_consume_token(NE);
          y = Exp4();
        x = builder.comparisonOp("~=", x, y);
          break;
        case 26:
          jj_consume_token(26);
          y = Exp4();
        x = builder.comparisonOp("<", x, y);
          break;
        case LE:
          jj_consume_token(LE);
          y = Exp4();
        x = builder.comparisonOp("_<", x, y);
          break;
        case 29:
          jj_consume_token(29);
          y = Exp4();
        x = builder.comparisonOp(">", x, y);
          break;
        case GE:
          jj_consume_token(GE);
          y = Exp4();
        x = builder.comparisonOp(">_", x, y);
          break;
        default:
          jj_la1[90] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 24:
        case NE:
        case 26:
        case LE:
        case GE:
        case 29:
          ;
          break;
        default:
          jj_la1[91] = jj_gen;
          break label_30;
        }
      }
      {if (true) return builder.finishComparisonOp(x, getCoord(tk));}
      break;
    default:
      jj_la1[92] = jj_gen;
      {if (true) return y;}
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpNd Exp4() throws ParseException {
  ExpNd x, y;
  Token tk;
    x = Exp5();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
      case 31:
        ;
        break;
      default:
        jj_la1[93] = jj_gen;
        break label_31;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
        tk = jj_consume_token(30);
        y = Exp5();
        x = builder.binaryOp("+", x, y, getCoord(tk));
        break;
      case 31:
        tk = jj_consume_token(31);
        y = Exp5();
        x = builder.binaryOp("-", x, y, getCoord(tk));
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ExpNd Exp5() throws ParseException {
  ExpNd x, y;
  Token tk;
    x = Exp6();
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
      case 33:
      case 55:
      case 66:
        ;
        break;
      default:
        jj_la1[95] = jj_gen;
        break label_32;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        tk = jj_consume_token(32);
        y = Exp6();
        x = builder.binaryOp("*", x, y, getCoord(tk));
        break;
      case 33:
        tk = jj_consume_token(33);
        y = Exp6();
        x = builder.binaryOp("/", x, y, getCoord(tk));
        break;
      case 55:
        tk = jj_consume_token(55);
        y = Exp6();
        x = builder.binaryOp("div", x, y, getCoord(tk));
        break;
      case 66:
        tk = jj_consume_token(66);
        y = Exp6();
        x = builder.binaryOp("mod", x, y, getCoord(tk));
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ExpNd Exp6() throws ParseException {
  ExpNd x = null;
  Token tk;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      tk = jj_consume_token(31);
      x = Exp6();
    {if (true) return builder.unaryOp("-", x, getCoord(tk));}
      break;
    case 11:
    case 48:
    case 49:
    case 70:
    case 84:
    case BOOL_LITERAL:
    case NAME:
    case DEC_LITERAL:
    case BIN_LITERAL:
    case OCT_LITERAL:
    case HEX_LITERAL:
    case REAL_LITERAL:
      x = Exp7();
    {if (true) return x;}
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpNd Exp7() throws ParseException {
  ExpNd x = null;
  Token tk = getToken(1);
    x = Exp8();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIME:
      jj_consume_token(PRIME);
      x = builder.unaryOp("'", x, getCoord(tk));
      break;
    default:
      jj_la1[98] = jj_gen;
      ;
    }
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ExpNd Exp8() throws ParseException {
  CanReadOp canRead;
  CanWriteOp canWrite;
  PermissionOp permissionOp;
  ExpNd objId;
  LocSetNd locSet;
  ExpNd x = null;
  Token tk;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      x = ObjectId();
    {if (true) return x;}
      break;
    case DEC_LITERAL:
      tk = jj_consume_token(DEC_LITERAL);
    {if (true) return builder.intLiteralExp(10, tk.image, getCoord(tk));}
      break;
    case BIN_LITERAL:
      tk = jj_consume_token(BIN_LITERAL);
    {if (true) return builder.intLiteralExp(2, tk.image.substring(2), getCoord(tk));}
      break;
    case OCT_LITERAL:
      tk = jj_consume_token(OCT_LITERAL);
    {if (true) return builder.intLiteralExp(8, tk.image.substring(2), getCoord(tk));}
      break;
    case HEX_LITERAL:
      tk = jj_consume_token(HEX_LITERAL);
    {if (true) return builder.intLiteralExp(16, tk.image.substring(3), getCoord(tk));}
      break;
    case REAL_LITERAL:
      tk = jj_consume_token(REAL_LITERAL);
    {if (true) return builder.realLiteralExp(tk.image, getCoord(tk));}
      break;
    case BOOL_LITERAL:
      tk = jj_consume_token(BOOL_LITERAL);
    {if (true) return builder.booleanLiteralExp(tk.image, getCoord(tk));}
      break;
    case 48:
      tk = jj_consume_token(48);
      jj_consume_token(11);
      locSet = LocSet();
      jj_consume_token(12);
    {if (true) return builder.makeCanReadOp(locSet, getCoord(tk));}
      break;
    case 49:
      tk = jj_consume_token(49);
      jj_consume_token(11);
      locSet = LocSet();
      jj_consume_token(12);
    {if (true) return builder.makeCanWriteOp(locSet, getCoord(tk));}
      break;
    case 70:
      tk = jj_consume_token(70);
      jj_consume_token(11);
      locSet = LocSet();
      jj_consume_token(12);
    {if (true) return builder.makePermissionOp(locSet, getCoord(tk));}
      break;
    case 84:
      tk = jj_consume_token(84);
      jj_consume_token(11);
      objId = ObjectId();
      jj_consume_token(12);
    {if (true) return builder.makeLengthOp(objId, getCoord(tk));}
      break;
    case 11:
      jj_consume_token(11);
      x = Exp();
      jj_consume_token(12);
    {if (true) return x;}
      break;
    default:
      jj_la1[99] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpNd OptGuard() throws ParseException {
  ExpNd x;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 80:
      jj_consume_token(80);
      x = Exp();
    {if (true) return x;}
      break;
    default:
      jj_la1[100] = jj_gen;
    {if (true) return builder.noExp(getCoord(1));}
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpNd ObjectId() throws ParseException {
  String str;
  NameNd name;
  ExpNd r, x;
  Token tk = getToken(1);
    str = Name();
    name = builder.simpleName(str, getCoord(tk));
    r = builder.nameExp(name, getCoord(tk));
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
      case 39:
        ;
        break;
      default:
        jj_la1[101] = jj_gen;
        break label_33;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        tk = jj_consume_token(13);
        x = Exp();
        jj_consume_token(14);
      r = builder.indexExp(r, x, getCoord(tk));
        break;
      case 39:
        tk = jj_consume_token(39);
        str = Name();
      r = builder.memberExp(r, str, getCoord(tk));
        break;
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public ExpNd Lock() throws ParseException {
  ExpNd r;
  Token tk = getToken(1);
    if (jj_2_26(2147483647)) {
      tk = jj_consume_token(83);
      r = builder.makeThis("this", getCoord(tk));
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        r = ObjectId();
        break;
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public ExpNd ObjectName() throws ParseException {
  String str;
  NameNd name;
  Token tk = getToken(1);
    str = Name();
    name = builder.simpleName(str, getCoord(tk));
    {if (true) return builder.nameExp(name, getCoord(tk));}
    throw new Error("Missing return statement in function");
  }

  final public String Name() throws ParseException {
  Token t;
    t = jj_consume_token(NAME);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_3_21() {
    if (jj_3R_47()) return true;
    if (jj_scan_token(11)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(BIN_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(DEC_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_47()) return true;
    if (jj_scan_token(36)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_47()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(PRIME)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_100()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(BICOND)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(31)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(FOLLOWS_FROM)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) jj_scanpos = xsp;
    if (jj_scan_token(69)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(65)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(IMPLIES)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(11)) return true;
    if (jj_scan_token(78)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(15)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(17)) return true;
    if (jj_scan_token(15)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(35)) return true;
    if (jj_scan_token(39)) return true;
    if (jj_scan_token(39)) return true;
    if (jj_scan_token(35)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(16)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_55()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(55)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(15)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(17)) return true;
    if (jj_scan_token(15)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(35)) return true;
    if (jj_scan_token(39)) return true;
    if (jj_scan_token(39)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(16)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(15)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(17)) return true;
    if (jj_scan_token(15)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(35)) return true;
    if (jj_scan_token(39)) return true;
    if (jj_scan_token(39)) return true;
    if (jj_scan_token(35)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(16)) return true;
    if (jj_scan_token(54)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(16)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(33)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    return false;
  }

  private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(32)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(15)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(17)) return true;
    if (jj_scan_token(15)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(35)) return true;
    if (jj_scan_token(39)) return true;
    if (jj_scan_token(39)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(16)) return true;
    if (jj_scan_token(54)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(16)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_84()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(11)) return true;
    if (jj_scan_token(61)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(31)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(39)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(30)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(11)) return true;
    if (jj_scan_token(58)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(35)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(13)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_78() {
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(GE)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(35)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(26)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(75)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(NE)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(52)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(17)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(11)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(12)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(15)) return true;
    if (jj_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(16)) return true;
    return false;
  }

  private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(84)) return true;
    if (jj_scan_token(11)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(12)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(24)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(70)) return true;
    if (jj_scan_token(11)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(12)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    if (jj_3R_82()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(13)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(49)) return true;
    if (jj_scan_token(11)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(12)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_76()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(48)) return true;
    if (jj_scan_token(11)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(12)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(BOOL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(11)) return true;
    if (jj_scan_token(64)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(11)) return true;
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(REAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(HEX_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(61)) return true;
    if (jj_scan_token(12)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(OCT_LITERAL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public HarpoParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[104];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800,0x0,0x800,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x800,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa000,0xa000,0x0,0x800,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x80800800,0x0,0x0,0x1800,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x80800800,0x0,0x80800800,0x1c0000,0x1c0000,0x0,0x200000,0x400000,0x80800800,0x3f000000,0x3f000000,0x3f000000,0xc0000000,0xc0000000,0x0,0x0,0x80000800,0x0,0x800,0x0,0x2000,0x2000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10200004,0x10200000,0x10200004,0x0,0x8,0x90000000,0x8008000,0x8008000,0x0,0x40000000,0x10280004,0x10280004,0x0,0x40000,0x0,0x0,0x2000000,0x10200004,0x10200004,0x0,0x0,0x8,0x2000000,0x0,0x0,0x10000000,0x200000,0x0,0x0,0x90000008,0x8,0x90000000,0x8008000,0x8008000,0x80000,0x0,0x10000000,0x10000000,0x10000000,0x100,0x8,0x100,0x0,0x0,0x8,0x10206004,0x10000000,0x200000,0x0,0x0,0x0,0x0,0x4000000,0x80000,0x100000,0x80000,0x40,0x100000,0x20,0x400,0x0,0x8000000,0x0,0x24000000,0x100400,0x6000,0x0,0x8,0x8,0x8,0x30000,0x20000000,0x20000000,0x30206004,0x21000000,0x90000008,0x8,0x90000000,0x0,0x4000000,0x0,0x30000,0x20000000,0x20030000,0x0,0x0,0x1000,0x0,0x0,0x30000,0x0,0x0,0x0,0x0,0x0,0x800003,0x800003,0x30000,0x200,0x30000,0x0,0x80,0x80,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x10,0x10,0x10,0x0,0x0,0x10,0x1180,0x1180,0x400000,0x0,0xe12,0xe12,0x400000,0x0,0x0,0x400000,0x0,0xe10,0xe10,0x400000,0x1,0x0,0x0,0xa00,0xa00,0x0,0x10,0x0,0xa00,0x20,0x0,0x20,0x1180,0x1180,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400010,0x0,0x10,0x0,0x2,0x20000,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x40000,0x20000,0x40000,0x0,0x0,0x0,0x0,0x0,0x17f00040,0x0,0x0,0x400010,0x0,0x20,0x0,0x20,0x2000,0x0,0x8,0x17f00040,0x0,0x17f00048,0x0,0x0,0x0,0x0,0x0,0x17f00040,0x0,0x0,0x0,0x0,0x0,0x4,0x4,0x17f00040,0x0,0x17f00040,0x10000,0x0,0x0,0x400000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[26];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public HarpoParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HarpoParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HarpoParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public HarpoParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HarpoParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public HarpoParser(HarpoParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HarpoParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[95];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 104; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 95; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 26; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
