/* Generated By:JavaCC: Do not edit this line. HarpoParserTokenManager.java */
package parser;
import frontEnd.Builder ;
import frontEnd.AST.* ;
import frontEnd.Builder.* ;

/** Token Manager. */
public class HarpoParserTokenManager implements HarpoParserConstants
{
                   int commentNestingDepth  ;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffff800000000000L) != 0L || (active1 & 0x1007ffc7L) != 0L)
         {
            jjmatchedKind = 83;
            return 27;
         }
         if ((active1 & 0x30L) != 0L)
         {
            jjmatchedKind = 83;
            return 5;
         }
         if ((active0 & 0x20000000L) != 0L)
            return 22;
         if ((active0 & 0x7c0000000000L) != 0L)
         {
            jjmatchedKind = 83;
            return 11;
         }
         if ((active0 & 0x1000000L) != 0L)
            return 0;
         if ((active0 & 0x8000000000L) != 0L)
            return 45;
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 83;
            return 66;
         }
         if ((active0 & 0x200000000L) != 0L)
            return 54;
         if ((active0 & 0x4000000L) != 0L)
            return 61;
         return -1;
      case 1:
         if ((active0 & 0x5f8f8c0000000000L) != 0L || (active1 & 0x1007fffcL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 1;
            }
            return 27;
         }
         if ((active0 & 0xa070700000000000L) != 0L || (active1 & 0x3L) != 0L)
            return 27;
         return -1;
      case 2:
         if ((active0 & 0x5b2fe00000000000L) != 0L || (active1 & 0x1007ff43L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 2;
            }
            return 27;
         }
         if ((active0 & 0x4800c0000000000L) != 0L || (active1 & 0xbcL) != 0L)
            return 27;
         return -1;
      case 3:
         if ((active0 & 0x5a2fe40000000000L) != 0L || (active1 & 0x10025a43L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 3;
            return 27;
         }
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x5a500L) != 0L)
            return 27;
         return -1;
      case 4:
         if ((active0 & 0x4203e40000000000L) != 0L || (active1 & 0x4a43L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 4;
            return 27;
         }
         if ((active0 & 0x182c000000000000L) != 0L || (active1 & 0x21000L) != 0L)
            return 27;
         return -1;
      case 5:
         if ((active0 & 0x640000000000L) != 0L || (active1 & 0x4800L) != 0L)
            return 27;
         if ((active0 & 0x4203800000000000L) != 0L || (active1 & 0x243L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 5;
            return 27;
         }
         return -1;
      case 6:
         if ((active0 & 0x4002000000000000L) != 0L || (active1 & 0x43L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 6;
            return 27;
         }
         if ((active0 & 0x201800000000000L) != 0L || (active1 & 0x200L) != 0L)
            return 27;
         return -1;
      case 7:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x43L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 7;
            return 27;
         }
         if ((active0 & 0x2000000000000L) != 0L)
            return 27;
         return -1;
      case 8:
         if ((active1 & 0x3L) != 0L)
            return 27;
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 8;
            return 27;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         jjmatchedKind = 11;
         return jjMoveStringLiteralDfa1_0(0x4L, 0x0L);
      case 41:
         return jjStopAtPos(0, 12);
      case 42:
         return jjStopAtPos(0, 32);
      case 43:
         return jjStopAtPos(0, 30);
      case 44:
         return jjStopAtPos(0, 35);
      case 45:
         return jjStopAtPos(0, 31);
      case 46:
         return jjStartNfaWithStates_0(0, 39, 45);
      case 47:
         return jjStartNfaWithStates_0(0, 33, 54);
      case 58:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 34);
      case 60:
         return jjStartNfaWithStates_0(0, 26, 61);
      case 61:
         return jjStartNfaWithStates_0(0, 24, 0);
      case 62:
         return jjStartNfaWithStates_0(0, 29, 22);
      case 64:
         return jjStopAtPos(0, 40);
      case 91:
         return jjStopAtPos(0, 13);
      case 93:
         return jjStopAtPos(0, 14);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x7c0000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3f000000000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xc0000000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x300000000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1800000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xe000000000000000L, 0x3L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x30L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfc0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000f000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x70000L);
      case 123:
         return jjStopAtPos(0, 15);
      case 124:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 16);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      case 61:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000000L, active1, 0x1000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x48L);
      case 102:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 61, 27);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x10036000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x880000000000000L, active1, 0x40000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10c000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3L);
      case 111:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 54, 27);
         return jjMoveStringLiteralDfa2_0(active0, 0x420800000000000L, active1, 0x104L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x680L);
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x820L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000L);
      case 124:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800L);
      case 99:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
      case 100:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 27);
         break;
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 71, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x12000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10020200L);
      case 106:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 27);
         break;
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x23000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x400L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x8000L);
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0x4040L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100600000000000L, active1, 0x100L);
      case 116:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 69, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x40001L);
      case 118:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x2L);
      case 119:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
      case 87:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L);
      case 99:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 27);
         break;
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 27);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0xa00240000000000L, active1, 0x5001L);
      case 104:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x20800L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
      case 110:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 27);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 27);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L);
      case 115:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x1024000000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 27);
         break;
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4200L);
      case 101:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x4001000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x840L);
      case 109:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x2200000000000L, active1, 0x3L);
      case 115:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 27);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 27);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 27);
         break;
      case 116:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 27);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L, active1, 0L);
      case 99:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 27);
         break;
      case 100:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 27);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0x2L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L);
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 27);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x3L);
      case 100:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 27);
         break;
      case 101:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 27);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 27);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 27);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L);
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 64, 27);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40L);
      case 116:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 65, 27);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 70, 27);
         break;
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 62, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x0L, 0x40000L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x0L, 0x10000L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0x100000L
};
static final long[] jjbitVec3 = {
   0x10000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec4 = {
   0x8000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0x100000000000L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0x100000000L, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x0L, 0x1000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x0L, 0x2000000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x0L, 0x2000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0x0L, 0x4000000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec11 = {
   0x0L, 0x0L, 0x1200000000000000L, 0x0L
};
static final long[] jjbitVec12 = {
   0x4000002000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec13 = {
   0x80L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 88;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 61:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 62;
                  if (curChar == 61)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  break;
               case 54:
                  if (curChar != 47)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(0, 2);
                  break;
               case 11:
               case 27:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(27);
                  break;
               case 5:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(27);
                  break;
               case 66:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(27);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAddStates(3, 10);
                  }
                  else if (curChar == 60)
                     jjAddStates(11, 12);
                  else if (curChar == 47)
                     jjAddStates(13, 14);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 45;
                  else if (curChar == 36)
                  {
                     if (kind > 83)
                        kind = 83;
                     jjCheckNAdd(27);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 38;
                  else if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 0:
                  if (curChar == 62 && kind > 18)
                     kind = 18;
                  break;
               case 7:
                  if (curChar == 47 && kind > 21)
                     kind = 21;
                  break;
               case 15:
                  if (curChar == 61 && kind > 25)
                     kind = 25;
                  break;
               case 19:
                  if (curChar == 60 && kind > 27)
                     kind = 27;
                  break;
               case 23:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if (curChar == 39 && kind > 41)
                     kind = 41;
                  break;
               case 26:
                  if (curChar != 36)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 31:
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if ((0x3000000000000L & l) != 0L && kind > 85)
                     kind = 85;
                  break;
               case 33:
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAddTwoStates(36, 37);
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L && kind > 86)
                     kind = 86;
                  break;
               case 38:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L && kind > 87)
                     kind = 87;
                  break;
               case 43:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 44:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddStates(15, 17);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(48);
                  break;
               case 49:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L && kind > 89)
                     kind = 89;
                  break;
               case 53:
                  if (curChar == 47)
                     jjAddStates(13, 14);
                  break;
               case 55:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(0, 2);
                  break;
               case 56:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 57:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 58:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 60:
                  if (curChar == 60)
                     jjAddStates(11, 12);
                  break;
               case 62:
                  if (curChar == 62 && kind > 20)
                     kind = 20;
                  break;
               case 63:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddStates(3, 10);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(70, 71);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L && kind > 84)
                     kind = 84;
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(74);
                  break;
               case 74:
                  if (curChar != 46)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(75, 79);
                  break;
               case 76:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(78, 52);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(78, 52);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddStates(18, 20);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(75);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(84);
                  break;
               case 85:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(87, 52);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(87, 52);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if (curChar == 92 && kind > 22)
                     kind = 22;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 83)
                        kind = 83;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 83)
                        kind = 83;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 114)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  break;
               case 66:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 83)
                        kind = 83;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 67;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 83)
                        kind = 83;
                     jjCheckNAdd(27);
                  }
                  else if (curChar == 126)
                     jjCheckNAdd(15);
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 7;
                  if (curChar == 110)
                     jjAddStates(21, 22);
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 126)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 6:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  if (curChar == 100 && kind > 22)
                     kind = 22;
                  break;
               case 12:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if (curChar == 126 && kind > 23)
                     kind = 23;
                  break;
               case 16:
                  if (curChar == 126)
                     jjCheckNAdd(15);
                  break;
               case 20:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if (curChar == 95 && kind > 28)
                     kind = 28;
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(27);
                  break;
               case 31:
                  if (curChar == 95)
                     jjAddStates(23, 24);
                  break;
               case 36:
                  if (curChar == 95)
                     jjAddStates(25, 26);
                  break;
               case 40:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 41:
                  if ((0x7e8000007eL & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if ((0x7e0000007eL & l) != 0L && kind > 87)
                     kind = 87;
                  break;
               case 46:
                  if (curChar == 95)
                     jjAddStates(27, 28);
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(29, 30);
                  break;
               case 51:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 55:
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(0, 2);
                  break;
               case 64:
                  if (curChar == 110)
                     jjAddStates(21, 22);
                  break;
               case 65:
                  if (curChar == 116 && kind > 23)
                     kind = 23;
                  break;
               case 67:
                  if (curChar == 116)
                     jjCheckNAdd(15);
                  break;
               case 68:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 70:
                  if (curChar == 95)
                     jjAddStates(31, 32);
                  break;
               case 72:
                  if (curChar == 95)
                     jjAddStates(33, 34);
                  break;
               case 75:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(35, 36);
                  break;
               case 78:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(78, 52);
                  break;
               case 80:
                  if (curChar == 95)
                     jjAddStates(37, 38);
                  break;
               case 82:
                  if (curChar == 95)
                     jjAddStates(39, 40);
                  break;
               case 84:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(41, 42);
                  break;
               case 87:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(87, 52);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 15;
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 18)
                     kind = 18;
                  break;
               case 3:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 19)
                     kind = 19;
                  break;
               case 4:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 20)
                     kind = 20;
                  break;
               case 9:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 21)
                     kind = 21;
                  break;
               case 13:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               case 14:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 23)
                     kind = 23;
                  break;
               case 17:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 25)
                     kind = 25;
                  break;
               case 18:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 21:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2) && kind > 27)
                     kind = 27;
                  break;
               case 24:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2) && kind > 28)
                     kind = 28;
                  break;
               case 25:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2) && kind > 41)
                     kind = 41;
                  break;
               case 55:
                  if (!jjCanMove_10(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 88 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa1_1(0x8L);
      case 42:
         return jjMoveStringLiteralDfa1_1(0x20L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 42:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_2()
{
   return 1;
}
static final int[] jjnextStates = {
   55, 56, 58, 70, 71, 72, 73, 74, 82, 83, 84, 61, 63, 54, 59, 46, 
   47, 48, 80, 81, 75, 66, 68, 31, 32, 36, 37, 46, 47, 49, 50, 70, 
   71, 72, 73, 76, 77, 80, 81, 82, 83, 85, 86, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 33:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 33:
         return ((jjbitVec1[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 33:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec4[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec5[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec6[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_7(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 42:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_8(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 42:
         return ((jjbitVec10[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_9(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 2:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec13[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_10(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec14[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, "\50", "\51", 
"\133", "\135", "\173", "\175", "\72", null, null, null, null, null, null, "\75", null, 
"\74", null, null, "\76", "\53", "\55", "\52", "\57", "\73", "\54", "\72\75", "\174", 
"\174\174", "\56", "\100", null, "\141\143\143\145\160\164", "\141\143\143", "\141\163", 
"\141\163\163\145\162\164", "\141\163\163\165\155\145", "\142\157\162\162\157\167\163", 
"\143\141\156\122\145\141\144", "\143\141\156\127\162\151\164\145", "\143\154\141\163\163", 
"\143\154\141\151\155", "\143\157", "\143\157\156\163\164", "\144\157", "\144\151\166", 
"\145\154\163\145", "\145\170\164\145\156\144\163", "\146\157\162", "\147\151\166\145\163", 
"\147\150\157\163\164", "\151\146", "\151\155\160\154\145\155\145\156\164\163", "\151\156", 
"\151\156\164\145\162\146\141\143\145", "\151\156\166\141\162\151\141\156\164", "\155\157\144", "\156\145\167", 
"\157\142\152", "\157\165\164", "\160\145\162\155\151\163\163\151\157\156", "\160\162\145", 
"\160\157\163\164", "\160\162\151\166\141\164\145", "\160\162\157\143", 
"\160\165\142\154\151\143", "\164\141\153\145\163", "\164\150\145\156", "\164\150\162\145\141\144", 
"\164\171\160\145", "\167\150\145\156", "\167\150\151\154\145", "\167\151\164\150", null, null, 
null, null, null, null, null, null, null, "\164\150\151\163", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_MULTI_LINE_COMMENT",
   "FINISH_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff801L, 0x1affffffL, 
};
static final long[] jjtoSkip = {
   0x7c2L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x42L, 0x0L, 
};
static final long[] jjtoMore = {
   0x3cL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[88];
private final int[] jjstateSet = new int[176];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public HarpoParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public HarpoParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 88; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getBeginLine();
      beginColumn = endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 91)
         {
            jjmatchedKind = 91;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 4)
         {
            jjmatchedKind = 4;
         }
         break;
       case 2:
         jjmatchedKind = 6;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 2 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
         commentNestingDepth = 1 ;
         break;
      case 3 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
         ++commentNestingDepth ;
         break;
      case 5 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
         commentNestingDepth -= 1;
         SwitchTo( commentNestingDepth==0 ? FINISH_MULTI_LINE_COMMENT : IN_MULTI_LINE_COMMENT ) ;
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
