type Ref;
type Field a;
type HeapType = <a> [Ref,Field a]a;
var Heap:HeapType;

type Perm = real ;
type PermissionType = <a>[Ref, Field a]Perm ;

type className;
function dtype(Ref) returns (className);

const unique Math:className;
const unique Math.c : Field int;

procedure Math.t0(this:Ref)
modifies Heap;
requires dtype(this) <: Math;
{
  var Permission : PermissionType where (forall <a> r:Ref, f : Field a :: Permission[r,f] == 0.0  );
  Permission[this, Math.c] := 1.0;
  assert Permission[ this, Math.c ] == 1.0 ;
  Heap[this,Math.c]:= 4;
  assert Permission[ this, Math.c ] > 0.0 ;
  assert Heap[this,Math.c]==4 ;
}

