// Prelude
type Ref;
type Field x;
type HeapType = <x> [Ref,Field x]x;

var Heap:HeapType;

type ArrayRef x;
type ArrayHeapType = <x> [ArrayRef x, int]x;
var ArrayHeap:ArrayHeapType;

type Perm = real;
type PermissionType = <x> [Ref,Field x]Perm;
type ArrayPermissionType = <x>[ArrayRef x, int] Perm;
var LockPermission: PermissionType;
var ArrayLockPermission: ArrayPermissionType;


function Length<x>(Field (ArrayRef x))returns(int);

const unique min8:int;
axiom min8 == -128;
const unique max8:int;
axiom max8==127;

const unique min16:int;
axiom min16 == -32768;
const unique max16:int;
axiom max16 == 32767;

const unique min32:int;
axiom min32 == -2147483648;
const unique max32:int;
axiom max32 == 2147483647;

const unique min64:int;
axiom min8 == -9223372036854775808;
const unique max64:int;
axiom max8== 9223372036854775807;

function Isint8(int) returns (bool);
axiom (forall x:int :: Isint8(x) <==> min8 <=x&&x<=max8);

function Isint16(int) returns (bool);
axiom (forall x:int :: Isint16(x) <==> min16 <=x&&x<=max16);

function Isint32(int) returns (bool);
axiom (forall x:int :: Isint32(x) <==> min32 <=x&&x<=max32);

function Isint64(int) returns (bool);
axiom (forall x:int :: Isint64(x) <==> min64 <= x && x <= max64);
