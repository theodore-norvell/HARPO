//!compile. execute with input "". expect output equals "3\n4\n5\n10". endl.

(class FIFO(in capacity : Int32)
	public proc enqueue(in value : Int32)
	public proc dequeue(out value : Int32)
	
	private obj container : Int32[capacity] := (for i : capacity do i for)
	private obj front : Int32 := 0
	private obj size : Int32 := 0
	
	(thread
		(while true do
			(accept
				enqueue(in value : Int32) when size < capacity
					container[(front + size) mod capacity] := value
					size := size + 1
				|
				dequeue(out value : Int32) when size > 0
					value := container[front]
					front := (front + 1) mod capacity
					size := size - 1
			accept)
		while)
	thread)
class FIFO)

(class Service()
	obj dbg : Debug := new Debug()
	obj queue : FIFO := new FIFO(20)
	obj result : Int32 := 0
	(thread
		queue.enqueue(3 as Int32)
		queue.enqueue(4 as Int32)
		queue.enqueue(5 as Int32)
		queue.dequeue(result)
		dbg.output(result)
		queue.enqueue(10 as Int32)
		queue.dequeue(result)
		dbg.output(result)
		queue.dequeue(result)
		dbg.output(result)
		queue.dequeue(result)
		dbg.output(result)
	thread)
class Service)

(class Debug()
	public proc output(in outArg : Int32)
	(thread
		(while true do
			(accept
				output(in outArg : Int32)
			accept)
		while)
	thread)
class Debug)

obj serv : Service := new Service()